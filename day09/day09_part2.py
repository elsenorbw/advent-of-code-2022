# --- Day 9: Rope Bridge ---
# This rope bridge creaks as you walk along it. You aren't sure how old it is, or whether it can even support your weight.

# It seems to support the Elves just fine, though. The bridge spans a gorge which was carved out by the massive river far below you.

# You step carefully; as you do, the ropes stretch and twist. You decide to distract yourself by modeling rope physics; maybe you can even figure out where not to step.

# Consider a rope with a knot at each end; these knots mark the head and the tail of the rope. If the head moves far enough away from the tail, the tail is pulled toward the head.

# Due to nebulous reasoning involving Planck lengths, you should be able to model the positions of the knots on a two-dimensional grid.
# Then, by following a hypothetical series of motions (your puzzle input) for the head, you can determine how the tail will move.

# Due to the aforementioned Planck lengths, the rope must be quite short; in fact, the head (H) and tail (T) must always be touching (diagonally adjacent and even overlapping both count as touching):

# ....
# .TH.
# ....

# ....
# .H..
# ..T.
# ....

# ...
# .H. (H covers T)
# ...
# If the head is ever two steps directly up, down, left, or right from the tail, the tail must also move one step in that direction so it remains close enough:

# .....    .....    .....
# .TH.. -> .T.H. -> ..TH.
# .....    .....    .....

# ...    ...    ...
# .T.    .T.    ...
# .H. -> ... -> .T.
# ...    .H.    .H.
# ...    ...    ...
# Otherwise, if the head and tail aren't touching and aren't in the same row or column, the tail always moves one step diagonally to keep up:

# .....    .....    .....
# .....    ..H..    ..H..
# ..H.. -> ..... -> ..T..
# .T...    .T...    .....
# .....    .....    .....

# .....    .....    .....
# .....    .....    .....
# ..H.. -> ...H. -> ..TH.
# .T...    .T...    .....
# .....    .....    .....
# You just need to work out where the tail goes as the head follows a series of motions. Assume the head and the tail both start at the same position, overlapping.

# For example:

# R 4
# U 4
# L 3
# D 1
# R 4
# D 1
# L 5
# R 2
# This series of motions moves the head right four steps, then up four steps, then left three steps, then down one step, and so on. After each step, you'll need to
# update the position of the tail if the step means the head is no longer adjacent to the tail. Visually, these motions occur as follows (s marks the starting position as a reference point):

# == Initial State ==

# ......
# ......
# ......
# ......
# H.....  (H covers T, s)

# == R 4 ==

# ......
# ......
# ......
# ......
# TH....  (T covers s)

# ......
# ......
# ......
# ......
# sTH...

# ......
# ......
# ......
# ......
# s.TH..

# ......
# ......
# ......
# ......
# s..TH.

# == U 4 ==

# ......
# ......
# ......
# ....H.
# s..T..

# ......
# ......
# ....H.
# ....T.
# s.....

# ......
# ....H.
# ....T.
# ......
# s.....

# ....H.
# ....T.
# ......
# ......
# s.....

# == L 3 ==

# ...H..
# ....T.
# ......
# ......
# s.....

# ..HT..
# ......
# ......
# ......
# s.....

# .HT...
# ......
# ......
# ......
# s.....

# == D 1 ==

# ..T...
# .H....
# ......
# ......
# s.....

# == R 4 ==

# ..T...
# ..H...
# ......
# ......
# s.....

# ..T...
# ...H..
# ......
# ......
# s.....

# ......
# ...TH.
# ......
# ......
# s.....

# ......
# ....TH
# ......
# ......
# s.....

# == D 1 ==

# ......
# ....T.
# .....H
# ......
# s.....

# == L 5 ==

# ......
# ....T.
# ....H.
# ......
# s.....--- Day 9: Rope Bridge ---
# This rope bridge creaks as you walk along it. You aren't sure how old it is, or whether it can even support your weight.

# It seems to support the Elves just fine, though. The bridge spans a gorge which was carved out by the massive river far below you.

# You step carefully; as you do, the ropes stretch and twist. You decide to distract yourself by modeling rope physics; maybe you can even figure out where not to step.

# Consider a rope with a knot at each end; these knots mark the head and the tail of the rope. If the head moves far enough away from the tail, the tail is pulled toward the head.

# Due to nebulous reasoning involving Planck lengths, you should be able to model the positions of the knots on a two-dimensional grid.
# Then, by following a hypothetical series of motions (your puzzle input) for the head, you can determine how the tail will move.

# Due to the aforementioned Planck lengths, the rope must be quite short; in fact, the head (H) and tail (T) must always be touching (diagonally adjacent and even overlapping both count as touching):

# ....
# .TH.
# ....

# ....
# .H..
# ..T.
# ....

# ...
# .H. (H covers T)
# ...
# If the head is ever two steps directly up, down, left, or right from the tail, the tail must also move one step in that direction so it remains close enough:

# .....    .....    .....
# .TH.. -> .T.H. -> ..TH.
# .....    .....    .....

# ...    ...    ...
# .T.    .T.    ...
# .H. -> ... -> .T.
# ...    .H.    .H.
# ...    ...    ...
# Otherwise, if the head and tail aren't touching and aren't in the same row or column, the tail always moves one step diagonally to keep up:

# .....    .....    .....
# .....    ..H..    ..H..
# ..H.. -> ..... -> ..T..
# .T...    .T...    .....
# .....    .....    .....

# .....    .....    .....
# .....    .....    .....
# ..H.. -> ...H. -> ..TH.
# .T...    .T...    .....
# .....    .....    .....
# You just need to work out where the tail goes as the head follows a series of motions. Assume the head and the tail both start at the same position, overlapping.

# For example:

# R 4
# U 4
# L 3
# D 1
# R 4
# D 1
# L 5
# R 2
# This series of motions moves the head right four steps, then up four steps, then left three steps, then down one step, and so on.
# After each step, you'll need to update the position of the tail if the step means the head is no longer adjacent to the tail.
# Visually, these motions occur as follows (s marks the starting position as a reference point):

# == Initial State ==

# ......
# ......
# ......
# ......
# H.....  (H covers T, s)

# == R 4 ==

# ......
# ......
# ......
# ......
# TH....  (T covers s)

# ......
# ......
# ......
# ......
# sTH...

# ......
# ......
# ......
# ......
# s.TH..

# ......
# ......
# ......
# ......
# s..TH.

# == U 4 ==

# ......
# ......
# ......
# ....H.
# s..T..

# ......
# ......
# ....H.
# ....T.
# s.....

# ......
# ....H.
# ....T.
# ......
# s.....

# ....H.
# ....T.
# ......
# ......
# s.....

# == L 3 ==

# ...H..
# ....T.
# ......
# ......
# s.....

# ..HT..
# ......
# ......
# ......
# s.....

# .HT...
# ......
# ......
# ......
# s.....

# == D 1 ==

# ..T...
# .H....
# ......
# ......
# s.....

# == R 4 ==

# ..T...
# ..H...
# ......
# ......
# s.....

# ..T...
# ...H..
# ......
# ......
# s.....

# ......
# ...TH.
# ......
# ......
# s.....

# ......
# ....TH
# ......
# ......
# s.....

# == D 1 ==

# ......
# ....T.
# .....H
# ......
# s.....

# == L 5 ==

# ......
# ....T.
# ....H.
# ......
# s.....

# ......
# ....T.
# ...H..
# ......
# s.....

# ......
# ......
# ..HT..
# ......
# s.....

# ......
# ......
# .HT...
# ......
# s.....

# ......
# ......
# HT....
# ......
# s.....

# == R 2 ==

# ......
# ......
# .H....  (H covers T)
# ......
# s.....

# ......
# ......
# .TH...
# ......
# s.....
# After simulating the rope, you can count up all of the positions the tail visited at least once.
# In this diagram, s again marks the starting position (which the tail also visited) and # marks other positions the tail visited:

# ..##..
# ...##.
# .####.
# ....#.
# s###..
# So, there are 13 positions the tail visited at least once.

# Simulate your complete hypothetical series of motions. How many positions does the tail of the rope visit at least once?

# ......
# ....T.
# ...H..
# ......
# s.....

# ......
# ......
# ..HT..
# ......
# s.....

# ......
# ......
# .HT...
# ......
# s.....

# ......
# ......
# HT....
# ......
# s.....

# == R 2 ==

# ......
# ......
# .H....  (H covers T)
# ......
# s.....

# ......
# ......
# .TH...
# ......
# s.....
# After simulating the rope, you can count up all of the positions the tail visited at least once. In this diagram, s again marks the starting position (which the tail also visited) and # marks other positions the tail visited:

# ..##..
# ...##.
# .####.
# ....#.
# s###..
# So, there are 13 positions the tail visited at least once.

# Simulate your complete hypothetical series of motions. How many positions does the tail of the rope visit at least once?

# Your puzzle answer was 6494.

# The first half of this puzzle is complete! It provides one gold star: *

# --- Part Two ---
# A rope snaps! Suddenly, the river is getting a lot closer than you remember. The bridge is still there, but some of the ropes that broke are now whipping toward you as you fall through the air!

# The ropes are moving too quickly to grab; you only have a few seconds to choose how to arch your body to avoid being hit. Fortunately, your simulation can be extended to support longer ropes.

# Rather than two knots, you now must simulate a rope consisting of ten knots.
# One knot is still the head of the rope and moves according to the series of motions.
# Each knot further down the rope follows the knot in front of it using the same rules as before.

# Using the same series of motions as the above example, but with the knots marked H, 1, 2, ..., 9, the motions now occur as follows:

# == Initial State ==

# ......
# ......
# ......
# ......
# H.....  (H covers 1, 2, 3, 4, 5, 6, 7, 8, 9, s)

# == R 4 ==

# ......
# ......
# ......
# ......
# 1H....  (1 covers 2, 3, 4, 5, 6, 7, 8, 9, s)

# ......
# ......
# ......
# ......
# 21H...  (2 covers 3, 4, 5, 6, 7, 8, 9, s)

# ......
# ......
# ......
# ......
# 321H..  (3 covers 4, 5, 6, 7, 8, 9, s)

# ......
# ......
# ......
# ......
# 4321H.  (4 covers 5, 6, 7, 8, 9, s)

# == U 4 ==

# ......
# ......
# ......
# ....H.
# 4321..  (4 covers 5, 6, 7, 8, 9, s)

# ......
# ......
# ....H.
# .4321.
# 5.....  (5 covers 6, 7, 8, 9, s)

# ......
# ....H.
# ....1.
# .432..
# 5.....  (5 covers 6, 7, 8, 9, s)

# ....H.
# ....1.
# ..432.
# .5....
# 6.....  (6 covers 7, 8, 9, s)

# == L 3 ==

# ...H..
# ....1.
# ..432.
# .5....
# 6.....  (6 covers 7, 8, 9, s)

# ..H1..
# ...2..
# ..43..
# .5....
# 6.....  (6 covers 7, 8, 9, s)

# .H1...
# ...2..
# ..43..
# .5....
# 6.....  (6 covers 7, 8, 9, s)

# == D 1 ==

# ..1...
# .H.2..
# ..43..
# .5....
# 6.....  (6 covers 7, 8, 9, s)

# == R 4 ==

# ..1...
# ..H2..
# ..43..
# .5....
# 6.....  (6 covers 7, 8, 9, s)

# ..1...
# ...H..  (H covers 2)
# ..43..
# .5....
# 6.....  (6 covers 7, 8, 9, s)

# ......
# ...1H.  (1 covers 2)
# ..43..
# .5....
# 6.....  (6 covers 7, 8, 9, s)

# ......
# ...21H
# ..43..
# .5....
# 6.....  (6 covers 7, 8, 9, s)

# == D 1 ==

# ......
# ...21.
# ..43.H
# .5....
# 6.....  (6 covers 7, 8, 9, s)

# == L 5 ==

# ......
# ...21.
# ..43H.
# .5....
# 6.....  (6 covers 7, 8, 9, s)

# ......
# ...21.
# ..4H..  (H covers 3)
# .5....
# 6.....  (6 covers 7, 8, 9, s)

# ......
# ...2..
# ..H1..  (H covers 4; 1 covers 3)
# .5....
# 6.....  (6 covers 7, 8, 9, s)

# ......
# ...2..
# .H13..  (1 covers 4)
# .5....
# 6.....  (6 covers 7, 8, 9, s)

# ......
# ......
# H123..  (2 covers 4)
# .5....
# 6.....  (6 covers 7, 8, 9, s)

# == R 2 ==

# ......
# ......
# .H23..  (H covers 1; 2 covers 4)
# .5....
# 6.....  (6 covers 7, 8, 9, s)

# ......
# ......
# .1H3..  (H covers 2, 4)
# .5....
# 6.....  (6 covers 7, 8, 9, s)
# Now, you need to keep track of the positions the new tail, 9, visits. In this example, the tail never moves, and so it only visits 1 position. However, be careful: more types of motion are possible than before, so you might want to visually compare your simulated rope to the one above.

# Here's a larger example:

# R 5
# U 8
# L 8
# D 3
# R 17
# D 10
# L 25
# U 20
# These motions occur as follows (individual steps are not shown):

# == Initial State ==

# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# ...........H..............  (H covers 1, 2, 3, 4, 5, 6, 7, 8, 9, s)
# ..........................
# ..........................
# ..........................
# ..........................
# ..........................

# == R 5 ==

# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# ...........54321H.........  (5 covers 6, 7, 8, 9, s)
# ..........................
# ..........................
# ..........................
# ..........................
# ..........................

# == U 8 ==

# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# ................H.........
# ................1.........
# ................2.........
# ................3.........
# ...............54.........
# ..............6...........
# .............7............
# ............8.............
# ...........9..............  (9 covers s)
# ..........................
# ..........................
# ..........................
# ..........................
# ..........................

# == L 8 ==

# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# ........H1234.............
# ............5.............
# ............6.............
# ............7.............
# ............8.............
# ............9.............
# ..........................
# ..........................
# ...........s..............
# ..........................
# ..........................
# ..........................
# ..........................
# ..........................

# == D 3 ==

# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# .........2345.............
# ........1...6.............
# ........H...7.............
# ............8.............
# ............9.............
# ..........................
# ..........................
# ...........s..............
# ..........................
# ..........................
# ..........................
# ..........................
# ..........................

# == R 17 ==

# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# ................987654321H
# ..........................
# ..........................
# ..........................
# ..........................
# ...........s..............
# ..........................
# ..........................
# ..........................
# ..........................
# ..........................

# == D 10 ==

# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# ...........s.........98765
# .........................4
# .........................3
# .........................2
# .........................1
# .........................H

# == L 25 ==

# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# ...........s..............
# ..........................
# ..........................
# ..........................
# ..........................
# H123456789................

# == U 20 ==

# H.........................
# 1.........................
# 2.........................
# 3.........................
# 4.........................
# 5.........................
# 6.........................
# 7.........................
# 8.........................
# 9.........................
# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# ...........s..............
# ..........................
# ..........................
# ..........................
# ..........................
# ..........................

# Now, the tail (9) visits 36 positions (including s) at least once:

# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# #.........................
# #.............###.........
# #............#...#........
# .#..........#.....#.......
# ..#..........#.....#......
# ...#........#.......#.....
# ....#......s.........#....
# .....#..............#.....
# ......#............#......
# .......#..........#.......
# ........#........#........
# .........########.........
# Simulate your complete series of motions on a larger rope with ten knots. How many positions does the tail of the rope visit at least once?


class Rope:
    def __init__(self, knot_count: int) -> None:
        # set a good starting state
        self.head_x = 0
        self.head_y = 0
        self.tails = [(self.head_x, self.head_y) for x in range(knot_count - 1)]
        print(f"self.tails is {self.tails}")
        self.tail_visited = set([(self.head_x, self.head_y)])
        print(f"self.tail_visited is {self.tail_visited}")

    def move_left(self):
        print("moving left")
        self.head_x -= 1
        self.tail_follow()

    def move_right(self):
        print("moving right")
        self.head_x += 1
        self.tail_follow()

    def move_up(self):
        print("moving up")
        self.head_y -= 1
        self.tail_follow()

    def move_down(self):
        print("moving down")
        self.head_y += 1
        self.tail_follow()

    def tail_follow(self):
        # we need to move each tail after the one before it..
        tail_x = self.head_x
        tail_y = self.head_y

        for this_tail_idx in range(len(self.tails)):
            # ok, promote the previous tail
            head_x = tail_x
            head_y = tail_y
            # and this is the new tail
            tail_x, tail_y = self.tails[this_tail_idx]

            # head has already moved, need to move the tail ?
            x_diff = tail_x - head_x
            y_diff = tail_y - head_y

            # if either of these are more than 2 different then we have to move
            diffs = [abs(x_diff), abs(y_diff)]
            diff_too_big = [True if x > 1 else False for x in diffs]

            if any(diff_too_big):
                # we need to move..
                if 0 != y_diff:
                    # moving either up or down
                    if y_diff > 0:
                        tail_y -= 1
                    else:
                        tail_y += 1

                if 0 != x_diff:
                    # moving either left or right
                    if x_diff > 0:
                        tail_x -= 1
                    else:
                        tail_x += 1

                # and store the new position
                self.tails[this_tail_idx] = (tail_x, tail_y)

        # and we need to update the new position of the final tail..
        self.tail_visited.add((tail_x, tail_y))

        print(
            f"After move logic head={self.head_x},{self.head_y} tail={self.tails} tail final position count is now {self.tail_positions()}"
        )
        self.print_locale()

    def print_the_grid(self, min_x, min_y, max_x, max_y):
        for y in range(min_y, max_y, 1):
            s = ""
            for x in range(min_x, max_x, 1):
                this_spot = "."
                if (x, y) in self.tail_visited:
                    this_spot = "#"
                if 0 == x and 0 == y:
                    this_spot = "s"

                for i in range(len(self.tails)):
                    if (x, y) == self.tails[i]:
                        this_spot = str(i)

                if self.head_x == x and self.head_y == y:
                    this_spot = "H"

                s += this_spot
            print(s)

    def print_locale(self, grid_size=10):
        # print out the small grid around the head and tail for debug purposes..
        min_x = self.head_x - grid_size
        min_y = self.head_y - grid_size
        max_x = self.head_x + grid_size + 1
        max_y = self.head_y + grid_size + 1

        self.print_the_grid(min_x, min_y, max_x, max_y)

    def print_all(self):
        # print the whole thing
        print(self.tail_visited)
        all_x = [a[0] for a in self.tail_visited]
        all_y = [a[1] for a in self.tail_visited]
        min_x = min(all_x) - 1
        max_x = max(all_x) + 1
        min_y = min(all_y) - 1
        max_y = max(all_y) + 1

        self.print_the_grid(min_x, min_y, max_x, max_y)

    def tail_positions(self):
        # how many unique places has the tail been ?
        return len(self.tail_visited)


def generate_rope_from_file(filename: str, knots_on_rope: int):

    the_rope = Rope(knots_on_rope)

    with open(filename, "r") as f:
        for this_line in f:
            this_line = this_line.strip()
            if "" != this_line:
                # lines are Direction<space>count
                parts = this_line.split(" ")
                direction = parts[0]
                move_count = int(parts[1])
                assert move_count > 0

                print(f"ORDER TO MOVE -> {direction} for {move_count}")

                # apply one move..
                for this_move in range(move_count):
                    if "R" == direction:
                        the_rope.move_right()
                    elif "L" == direction:
                        the_rope.move_left()
                    elif "U" == direction:
                        the_rope.move_up()
                    elif "D" == direction:
                        the_rope.move_down()
                    else:
                        raise Exception(
                            f"What the hell kind of direction is {direction} ??"
                        )

    return the_rope


def part2(filename: str):
    rope = generate_rope_from_file(filename, 10)
    rope.print_all()
    result = rope.tail_positions()
    print(f"The number of tail positions for {filename} is {result}")
    return result


if __name__ == "__main__":
    sample_filename = "sample.txt"
    sample2_filename = "sample2.txt"
    puzzle_filename = "input.txt"
    sample_expected_result = 1
    sample2_expected_result = 36

    sample_actual = part2(sample_filename)
    assert sample_actual == sample_expected_result

    sample2_actual = part2(sample2_filename)
    assert sample2_actual == sample2_expected_result

    puzzle_result = part2(puzzle_filename)
